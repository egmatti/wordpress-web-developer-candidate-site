// ==========================================
// MIXINS
// ==========================================

//BACKGROUND IMAGES

@mixin bg-image (
  $image-folder,
  $bg-image,
  $bg-attachment: null,
  $bg-size: cover,
  $bg-position: center) {
    background: url("#{$path-image}/#{$image-folder}/#{$bg-image}.png");
    background-attachment: $bg-attachment;
    background-repeat: no-repeat;
    background-size: $bg-size;
    background-position: $bg-position;
}


// BEM SELECTORS

@mixin e($element) {
  &__#{$element} {
      @content;
  }
}

@mixin m($modifier) {
  &--#{$modifier} {
      @content;
  }
}


// BOX SHADOW

@mixin box-shadow( $h: 0px , $v: 0.5px , $b: 10px , $s: 0px , $c: $color-box-shadow ) {
  -webkit-box-shadow: $h $v $b $s $c;
  -moz-box-shadow: $h $v $b $s $c;
  box-shadow: $h $v $b $s $c;
}

// BOX SIZING

@mixin box-sizing($type) {
  -webkit-box-sizing:$type;
  -moz-box-sizing:$type;
  box-sizing:$type;
}


// CLEARFIX

@mixin clearfix() {
  &:after {
      content: “”;
      display: table;
      clear: both;
  }
}


// FLEXBOX

@mixin flexbox(
  $align: center,
  $display: flex,
  $justify: center,
  $direction: null,
  $wrap: null) {
    align-items: $align;
    display: $display;
    justify-content: $justify;
    flex-direction: $direction;
    flex-wrap: $wrap;
}


// GRADIENT

@mixin gradient(
  $start-color,
  $end-color,
  $orientation) {
    background: $start-color;

    @if $orientation == vertical {
       // vertical
       background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
       background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
       background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
       background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
       background: -ms-linear-gradient(top,  $start-color 0%,$end-color 100%);
       background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
       filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
     }

     @else if $orientation == horizontal {
       // horizontal
       background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
       background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
       background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
       background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
       background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
       background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
       filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
     }

     @else {
       // radial
       background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
       background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
       background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
       background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
       background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
       background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
       filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
     }
   }


// MEDIA QUERIES

@mixin media-query($break) {
  @if $break == "small" {
    @media (min-width: $breakpoint-small) and (max-width: $breakpoint-medium) {
      @content;
    }
  }
  @else if $break == "medium" {
    @media (min-width: $breakpoint-medium + 1px) and (max-width: $breakpoint-large) {
      @content;
    }
  }
  @else if $break == "large" {
    @media (min-width: $breakpoint-large + 1px) {
      @content;
    }
  }
  @else {
    @error "Whoops! No value could be retrieved for '#{$break}.'";
  }
}


// OPACITY

@mixin opacity($opacity) {
  opacity: $opacity;
  filter: alpha(opacity=($opacity * 100));
}


// TEXT SHADOW

@mixin text-shadow( $h: 0px , $v: 0.5px , $b: 5px , $c: $color-text-shadow ) {
  -webkit-text-shadow: $h $v $b $c;
  -moz-text-shadow: $h $v $b $c;
  text-shadow: $h $v $b $c;
}


// VERTICAL ALIGN

@mixin vertical-align() {
  position: relative;
  top: 50%;
  -webkit-transform: translateY(-50%);
  -ms-transform: translateY(-50%);
  transform: translateY(-50%);
}
